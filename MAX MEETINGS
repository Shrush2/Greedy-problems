import java.util.*;

public class Solution {
    static class Meeting {
        int start, end;
        Meeting(int s, int e) {
            start = s;
            end = e;
        }
    }
    public static int maximumMeetings(int []start, int []end) {
     int n = end.length;
     List<Meeting> meetings = new ArrayList<>();

     for(int i = 0; i < n;i++){
         meetings.add(new Meeting(start[i],end[i]));
     }

     meetings.sort((a,b) -> a.end - b.end);

        int maxmeeting = 0;
        int lastmeeting = meetings.get(0).end;
        maxmeeting = 1;

        for(int i = 1; i < n;i++){
            if(meetings.get(i).start > lastmeeting){
                maxmeeting++;
                lastmeeting = meetings.get(i).end;
            }
        }
        return maxmeeting;
    }
}
You are given the schedule of 'N' meetings with their start time 'Start[i]' and end time 'End[i]'.
You have only 1 meeting room. So, you need to return the maximum number of meetings you can organize.Note:
The start time of one chosen meeting canâ€™t be equal to the end time of the other chosen meeting.
For example:
'N' = 3, Start = [1, 3, 6], End = [4, 8, 7].

You can organize a maximum of 2 meetings. Meeting number 1 from 1 to 4, Meeting number 3 from 6 to 7.


T.C => O(n + n log n + n) => O(n)
S.C => O(n)
