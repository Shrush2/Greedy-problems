class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        
        int n = intervals.length;
        Arrays.sort(intervals,(a,b) -> a[1]-b[1]);

        int lastend = intervals[0][1];
        int cnt = 1;

       for(int i = 1; i < n;i++){
        if(intervals[i][0] >= lastend){
            cnt++;
            lastend = intervals[i][1];
        }
       }
     return n - cnt;
    }
}

Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.
Note that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.

 Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.


T.C => O(n log N) + O(N)  => O(N)
S.C => O(1)
