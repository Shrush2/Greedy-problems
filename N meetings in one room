class Solution {

    class Meetings{
        int start;
        int end;

        Meetings(int s,int e){
            start = s;
            end = e;
        }
    }
    public int maxMeetings(int[] start, int[] end) {
       //your code goes here
      List<Meetings> res = new ArrayList<>();
      int n = start.length;


      for(int i = 0; i < n;i++){
        res.add(new Meetings(start[i],end[i]));
      }

      res.sort((a,b) -> a.end - b.end);

       int freetime = res.get(0).end;
       int cnt = 1;

       for(int i = 1; i < n;i++){
        if(res.get(i).start > freetime){
            cnt++;
            freetime = res.get(i).end;
        }else{
            continue;
        }
       }
       return cnt;

    }

Given one meeting room and N meetings represented by two arrays, start and end, where start[i] represents the start time of the ith meeting and end[i] represents the end time of the ith meeting, 
determine the maximum number of meetings that can be accommodated in the meeting room if only one meeting can be held at a time.

Examples:
Input : Start = [1, 3, 0, 5, 8, 5] , End = [2, 4, 6, 7, 9, 9]
Output : 4
Explanation : The meetings that can be accommodated in meeting room are (1,2) , (3,4) , (5,7) , (8,9).


T.C => O(log n) + O(n)
S.C => O(n)
