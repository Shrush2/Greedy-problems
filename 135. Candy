public class Solution {
    public static int requiredCandies(int[] students) {
        // Write your code here.
        int n = students.length;
        int left[] = new int[n];
        left[0] = 1;

        if(n == 0) return 0;

        for(int i = 1; i < n; i++){
            if(students[i] > students[i-1]){
                left[i] = left[i-1] + 1;
            }else{
                left[i] = 1;
            }
        }

        int curr = 1;
        int sum = left[n-1];

        for(int i = n-2 ; i >= 0;i--){
            if(students[i] > students[i+1]){
                curr++;
            }else{
                curr = 1;
            }
              sum += Math.max(left[i],curr);

        }
        return sum;
    }
}

There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.
You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.


T.C => O(N)
S.C => O(N)
