import java.util.*;


public class Solution {
    public static int assignCookie(int []greed, int []size) {
        // Write your code here.
        int m = greed.length;
        int n = size.length;
        
        Arrays.sort(greed);
       Arrays.sort(size);
        int l = 0,r = 0;
        
        while(l < m && r < n){
            
            if(greed[l] <= size[r]){
                l++;
                }
            r++;
            }
        return l;
    }

}


There are ‘N’ children and ‘M’ cookies.
You are given two arrays, ‘SIZE’, and ‘GREED’, where ‘GREED[i]’ is the greed of ‘ith’ children and ‘SIZE[j]’ is the size of the ‘jth’ cookie.
You must assign ‘jth’ cookie to ‘ith’ child such that the greed of maximum children is satisfied. A child's greed is satisfied if the size of the cookie assigned to him is greater than or equal to his greed.
You must return the maximum number of children whose greed can be satisfied.



Input: g = [1,2,3], s = [1,1]
Output: 1
Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
You need to output 1.

T.C => O(N log N) + O(N log N) + O(M) = O(N log n)
S.c => O(1)
