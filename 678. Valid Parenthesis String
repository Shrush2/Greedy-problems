class Solution {
    public boolean checkValidString(String s) {
        int leftmin = 0, leftmax = 0;
        for (char ch : s.toCharArray()) {
            if (ch == '(') {
                leftmin++;
                leftmax++;
            } else if (ch == ')') {
                leftmin--;
                leftmax--;
            } else {
                leftmin--;
                leftmax++;
            }
            if (leftmin < 0)
                leftmin = 0;
            if (leftmax < 0)
                return false;
        }

        return (leftmin == 0);

    }
}

Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.
The following rules define a valid string:
Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
 

Example 1:

Input: s = "()"
Output: true

T.C => O(N)
S.C => O(1)
