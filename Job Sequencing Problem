import java.util.*;

public class Solution {

    static class Job{
     int id;
     int profit;
     int deadline;

     Job(int i,int d,int p){
         id = i;
         deadline = d;
         profit = p;
     }
    }
    public static int[] jobScheduling(int [][]jobs) {

        int n = jobs.length;
        Job arr[] = new Job[n];
        for(int i = 0; i < n;i++){
            arr[i] = new Job(jobs[i][0],jobs[i][1],jobs[i][2]);
        }

        Arrays.sort(arr,(a,b) -> (b.profit - a.profit));
        int maxdeadline = 0;

        for(Job j : arr){
        maxdeadline = Math.max(maxdeadline,j.deadline);
        }

        int slot[] = new int[maxdeadline + 1];
        Arrays.fill(slot,-1);

        int cntjobs = 0;
        int totalprofits = 0;

        for(Job job : arr){
            for(int d = job.deadline; d > 0; d--){
                if(slot[d] == -1){
                    slot[d] = job.id;
                    cntjobs++;
                    totalprofits += job.profit;
                    break;
                }
            }
        }
        
    return new int[]{cntjobs,totalprofits};
    }
}


You are given a 'Nx3' 2-D array 'Jobs' describing 'N' jobs where 'Jobs[i][0]' denotes the id of 'i-th' job, 'Jobs[i][1]' denotes the deadline of 'i-th' job, and 'Jobs[i][2]' denotes the profit associated with 'i-th job'.
You will make a particular profit if you complete the job within the deadline associated with it. Each job takes 1 unit of time to be completed, and you can schedule only one job at a particular time.
Return the number of jobs to be done to get maximum profit.

Note :
If a particular job has a deadline 'x', it means that it needs to be completed at any time before 'x'.

Assume that the start time is 0.


For Example :
'N' = 3, Jobs = [[1, 1, 30], [2, 3, 40], [3, 2, 10]].

All the jobs have different deadlines. So we can complete all the jobs.

At time 0-1, Job 1 will complete.
At time 1-2, Job 3 will complete.
At time 2-3, Job 2 will complete.

So our answer is [3 80].


T.C => O(N Log N) + O(N)
S.C => O(N)
